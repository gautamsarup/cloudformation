AWSTemplateFormatVersion: 2010-09-09
Parameters:
  S3BucketName:
    Description: Enter S3 Bucket Name
    Type: String
    MinLength: 3
    AllowedPattern: '^[A-Za-z0-9_-]*$'
    Default: team3cfpracticum1612
  IAMRoleName:
    Description: Enter IAM role name
    Type: String
    MinLength: 3
    AllowedPattern: "^[A-Za-z0-9_-]*$"
    Default: "myLambdaExecutionRole"
  LambdaFunctionName:
    Description: Enter Lambda function name
    Type: String
    MinLength: 3
    AllowedPattern: "^[A-Za-z0-9_-]*$"
    Default: "myLambdaS3function"
Resources:
  mys3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt myLambdaFunction.Arn
            Event: s3:ObjectCreated:*
    DependsOn:
    - myLambdaFunction

  myLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambdas3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'


  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt myLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'

  myLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt myLambdaIAMRole.Arn
      Code:
        ZipFile: |
          import json
          import urllib.parse
          import boto3

          print('Loading function')

          s3 = boto3.client('s3')


          def lambda_handler(event, context):
              #print("Received event: " + json.dumps(event, indent=2))

              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              try:
                  response = s3.get_object(Bucket=bucket, Key=key)
                  print("CONTENT TYPE: " + response['ContentType'])
                  return response['ContentType']
              except Exception as e:
                  print(e)
                  print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
                  raise e
      # VpcConfig:
      #   SubnetIds:
          # - subnet-071f712345678e7c8
          # - subnet-07fd123456788a036
Outputs:
  Lambda:
    Description: Lambda S3 
    Export:
      Name: !Sub ${AWS::StackName}-Lambda
    Value: !Ref myLambdaFunction
  S3:
    Description: S3 
    Export:
      Name: !Sub ${AWS::StackName}-S3
    Value: !Ref mys3bucket